(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{324:function(_,t,a){"use strict";a.r(t);var v=a(7),r=Object(v.a)({},(function(){var _=this,t=_._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[_._v("#")]),_._v(" 队列")]),_._v(" "),t("h2",{attrs:{id:"_1-定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义"}},[_._v("#")]),_._v(" 1. 定义")]),_._v(" "),t("p",[t("strong",[_._v("队列（queue）"),t("strong",[_._v("是一种只能在不同端进行插入或删除操作的线性表，进行插入操作的一端称为")]),_._v("队尾（rear）")]),_._v("，进行删除操作的一端称为"),t("strong",[_._v("队头（front）")]),_._v("，队列的插入操作通常称为 "),t("strong",[_._v("入队（push）")]),_._v("，队列的删除操作通常称为 "),t("strong",[_._v("出队（pop）")]),_._v("。因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为 "),t("strong",[_._v("先进先出（FIFO）线性表")]),_._v("。")]),_._v(" "),t("h2",{attrs:{id:"_2-实现方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现方式"}},[_._v("#")]),_._v(" 2. 实现方式")]),_._v(" "),t("p",[_._v("主要有 "),t("strong",[_._v("顺序队")]),_._v(" 和 "),t("strong",[_._v("链队")]),_._v(" 两种实现方式。")]),_._v(" "),t("p",[_._v("队列主要有如下几个方法：")]),_._v(" "),t("ol",[t("li",[t("code",[_._v("E push(E element)")]),_._v(" 方法，元素入队")]),_._v(" "),t("li",[t("code",[_._v("E pop()")]),_._v(" 方法，元素出队")]),_._v(" "),t("li",[t("code",[_._v("E peek()")]),_._v(" 方法，查看队头元素")]),_._v(" "),t("li",[t("code",[_._v("boolean empty()")]),_._v(" 方法，判断队列是否为空")])]),_._v(" "),t("h3",{attrs:{id:"_2-1-顺序队"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-顺序队"}},[_._v("#")]),_._v(" 2.1. 顺序队")]),_._v(" "),t("p",[_._v("顺序队使用数组来实现。")]),_._v(" "),t("h4",{attrs:{id:"_2-1-1-顺序队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-顺序队列"}},[_._v("#")]),_._v(" 2.1.1. 顺序队列")]),_._v(" "),t("p",[_._v("建立顺序队列结构必须为其静态分配或动态申请一片连续的存储空间，并设置两个指针进行管理。约定：一个是 "),t("strong",[_._v("队头指针 "),t("code",[_._v("front")])]),_._v("，它指向队头元素的前一个位置；另一个是 "),t("strong",[_._v("队尾指针 "),t("code",[_._v("rear")])]),_._v("，它指向队尾元素所在位置。")]),_._v(" "),t("p",[_._v("每次在队尾插入一个元素时，"),t("code",[_._v("rear")]),_._v(" 加一；每次在队头删除一个元素时，"),t("code",[_._v("front")]),_._v(" 加一。随着插入和删除操作的进行，队列元素的个数不断变化，队列所占的存储空间也在队列结构所分配的连续空间中移动。当 "),t("code",[_._v("front = rear")]),_._v(" 时，表示队列中没有任何元素，称为 "),t("strong",[_._v("空队列")]),_._v("。当 "),t("code",[_._v("rear")]),_._v(" 增加到指向分配的连续空间之外时，队列无法再插入新元素，但这时往往还有大量可用空间未被占用，这些空间是已经出队的队列元素曾经占用过的存储单元。如下图所示：")]),_._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"image-20221111113541183","data-src":"https://fastly.jsdelivr.net/gh/xihuanxiaorang/images/202211111135248.png",loading:"lazy"}})]),_._v(" "),t("p",[_._v("顺序队列中的溢出现象：")]),_._v(" "),t("ol",[t("li",[_._v("“下溢”现象：当队列为空时，做出队运算产生的溢出现象。“下溢”是正常现象，常用作程序控制转移的条件。")]),_._v(" "),t("li",[_._v("“真上溢”现象：当队列满时，做进队运算产生的溢出现象。“真上溢”是一种出错状态，应设法避免。")]),_._v(" "),t("li",[t("strong",[_._v("“假上溢”现象")]),_._v("：由于入队和出队操作中，头尾指针只增加不减小，致使被删元素的空间永远无法重新利用。当队列中实际的元素个数远远小于分配的队列空间规模时，也可能由于尾指针已超越队列空间的上界而不能做入队操作，该现象称为“假上溢”现象。")])]),_._v(" "),t("h5",{attrs:{id:"_2-1-1-1-入队"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-1-入队"}},[_._v("#")]),_._v(" 2.1.1.1. 入队")]),_._v(" "),t("h5",{attrs:{id:"_2-1-1-2-出队"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-2-出队"}},[_._v("#")]),_._v(" 2.1.1.2. 出队")]),_._v(" "),t("h5",{attrs:{id:"_2-1-1-3-队空"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-3-队空"}},[_._v("#")]),_._v(" 2.1.1.3. 队空")]),_._v(" "),t("h4",{attrs:{id:"_2-1-2-循环队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-循环队列"}},[_._v("#")]),_._v(" 2.1.2. 循环队列")]),_._v(" "),t("p",[_._v("在实际使用队列时，为了使队列空间能重复使用，往往对队列的使用方法稍加改进：无论插入或删除，一旦 "),t("code",[_._v("rear")]),_._v(" 指针加一或 "),t("code",[_._v("front")]),_._v(" 指针加一时超出了所分配的队列空间，就让它指向这片连续空间的起始位置。从 "),t("code",[_._v("capcity - 1")]),_._v(" 加一变到 "),t("code",[_._v("0")]),_._v("，可以用取余运算 "),t("code",[_._v("rear % capcity")]),_._v(" 和 "),t("code",[_._v("front % capcity")]),_._v(" 来实现。这实际上是把队列空间想象成一个环形空间，环形空间中的存储单元循环使用，用这种方法管理的队列也就称为 "),t("strong",[_._v("循环队列")]),_._v("。")]),_._v(" "),t("p",[_._v("在循环队列中，当队列为空时，有 "),t("code",[_._v("front = rear")]),_._v("，而当所有队列空间全占满时，也有 "),t("code",[_._v("front = rear")]),_._v("。为了区别这两种情况，规定循环队列最多只能有 "),t("code",[_._v("capcity - 1")]),_._v(" 个队列元素，当循环队列种只剩下一个空存储单元时，队列就已经满了。因此，"),t("strong",[_._v("队列判空的条件为 "),t("code",[_._v("front = rear")])]),_._v("，而 "),t("strong",[_._v("队列判满的条件为 "),t("code",[_._v("front = (rear + 1) % capcity")])]),_._v("，"),t("strong",[_._v("队列中的元素个数为 "),t("code",[_._v("(rear - front + capcity) % capcity")])]),_._v("。")]),_._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"image-20221111122155413","data-src":"https://fastly.jsdelivr.net/gh/xihuanxiaorang/images/202211111221480.png",loading:"lazy"}})]),_._v(" "),t("h5",{attrs:{id:"_2-1-2-1-入队"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-1-入队"}},[_._v("#")]),_._v(" 2.1.2.1. 入队")]),_._v(" "),t("h5",{attrs:{id:"_2-1-2-2-出队"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-2-出队"}},[_._v("#")]),_._v(" 2.1.2.2. 出队")]),_._v(" "),t("h5",{attrs:{id:"_2-1-2-3-队空"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-3-队空"}},[_._v("#")]),_._v(" 2.1.2.3. 队空")]),_._v(" "),t("h3",{attrs:{id:"_2-2-链队"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-链队"}},[_._v("#")]),_._v(" 2.2. 链队")]),_._v(" "),t("p",[_._v("使用链表来实现。")])])}),[],!1,null,null,null);t.default=r.exports}}]);